// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: worker/database/v1/transaction_service.proto

package dbv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BeginTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BeginTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeginTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeginTransactionRequestMultiError, or nil if none found.
func (m *BeginTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BeginTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDescription()) > 512 {
		err := BeginTransactionRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 512 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BeginTransactionRequestMultiError(errors)
	}

	return nil
}

// BeginTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by BeginTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type BeginTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeginTransactionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeginTransactionRequestMultiError) AllErrors() []error { return m }

// BeginTransactionRequestValidationError is the validation error returned by
// BeginTransactionRequest.Validate if the designated constraints aren't met.
type BeginTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeginTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeginTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeginTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeginTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeginTransactionRequestValidationError) ErrorName() string {
	return "BeginTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BeginTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeginTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeginTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeginTransactionRequestValidationError{}

// Validate checks the field values on BeginTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BeginTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BeginTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BeginTransactionResponseMultiError, or nil if none found.
func (m *BeginTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BeginTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTransactionId()) < 1 {
		err := BeginTransactionResponseValidationError{
			field:  "TransactionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BeginTransactionResponseValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BeginTransactionResponseValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BeginTransactionResponseValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BeginTransactionResponseMultiError(errors)
	}

	return nil
}

// BeginTransactionResponseMultiError is an error wrapping multiple validation
// errors returned by BeginTransactionResponse.ValidateAll() if the designated
// constraints aren't met.
type BeginTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BeginTransactionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BeginTransactionResponseMultiError) AllErrors() []error { return m }

// BeginTransactionResponseValidationError is the validation error returned by
// BeginTransactionResponse.Validate if the designated constraints aren't met.
type BeginTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BeginTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BeginTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BeginTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BeginTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BeginTransactionResponseValidationError) ErrorName() string {
	return "BeginTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BeginTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBeginTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BeginTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BeginTransactionResponseValidationError{}

// Validate checks the field values on TransactionOperation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionOperation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionOperation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionOperationMultiError, or nil if none found.
func (m *TransactionOperation) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionOperation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := MutationType_name[int32(m.GetType())]; !ok {
		err := TransactionOperationValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDocumentPath()) < 1 {
		err := TransactionOperationValidationError{
			field:  "DocumentPath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NewValue

	// no validation rules for OldValue

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionOperationValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionOperationValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionOperationValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionOperationMultiError(errors)
	}

	return nil
}

// TransactionOperationMultiError is an error wrapping multiple validation
// errors returned by TransactionOperation.ValidateAll() if the designated
// constraints aren't met.
type TransactionOperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionOperationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionOperationMultiError) AllErrors() []error { return m }

// TransactionOperationValidationError is the validation error returned by
// TransactionOperation.Validate if the designated constraints aren't met.
type TransactionOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionOperationValidationError) ErrorName() string {
	return "TransactionOperationValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionOperationValidationError{}

// Validate checks the field values on ExecuteTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteTransactionRequestMultiError, or nil if none found.
func (m *ExecuteTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTransactionId()) < 1 {
		err := ExecuteTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetOperations()); l < 1 || l > 100 {
		err := ExecuteTransactionRequestValidationError{
			field:  "Operations",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOperations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExecuteTransactionRequestValidationError{
						field:  fmt.Sprintf("Operations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExecuteTransactionRequestValidationError{
						field:  fmt.Sprintf("Operations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExecuteTransactionRequestValidationError{
					field:  fmt.Sprintf("Operations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExecuteTransactionRequestMultiError(errors)
	}

	return nil
}

// ExecuteTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by ExecuteTransactionRequest.ValidateAll() if the
// designated constraints aren't met.
type ExecuteTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteTransactionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteTransactionRequestMultiError) AllErrors() []error { return m }

// ExecuteTransactionRequestValidationError is the validation error returned by
// ExecuteTransactionRequest.Validate if the designated constraints aren't met.
type ExecuteTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteTransactionRequestValidationError) ErrorName() string {
	return "ExecuteTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteTransactionRequestValidationError{}

// Validate checks the field values on ExecuteTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteTransactionResponseMultiError, or nil if none found.
func (m *ExecuteTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperationsExecuted

	if all {
		switch v := interface{}(m.GetExecutedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteTransactionResponseValidationError{
					field:  "ExecutedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteTransactionResponseValidationError{
					field:  "ExecutedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecutedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteTransactionResponseValidationError{
				field:  "ExecutedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExecuteTransactionResponseMultiError(errors)
	}

	return nil
}

// ExecuteTransactionResponseMultiError is an error wrapping multiple
// validation errors returned by ExecuteTransactionResponse.ValidateAll() if
// the designated constraints aren't met.
type ExecuteTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteTransactionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteTransactionResponseMultiError) AllErrors() []error { return m }

// ExecuteTransactionResponseValidationError is the validation error returned
// by ExecuteTransactionResponse.Validate if the designated constraints aren't met.
type ExecuteTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteTransactionResponseValidationError) ErrorName() string {
	return "ExecuteTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteTransactionResponseValidationError{}

// Validate checks the field values on CommitTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommitTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommitTransactionRequestMultiError, or nil if none found.
func (m *CommitTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTransactionId()) < 1 {
		err := CommitTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommitTransactionRequestMultiError(errors)
	}

	return nil
}

// CommitTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by CommitTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type CommitTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitTransactionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitTransactionRequestMultiError) AllErrors() []error { return m }

// CommitTransactionRequestValidationError is the validation error returned by
// CommitTransactionRequest.Validate if the designated constraints aren't met.
type CommitTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitTransactionRequestValidationError) ErrorName() string {
	return "CommitTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommitTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitTransactionRequestValidationError{}

// Validate checks the field values on CommitTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommitTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommitTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommitTransactionResponseMultiError, or nil if none found.
func (m *CommitTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommitTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommittedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommitTransactionResponseValidationError{
					field:  "CommittedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommitTransactionResponseValidationError{
					field:  "CommittedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommittedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommitTransactionResponseValidationError{
				field:  "CommittedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommitTransactionResponseMultiError(errors)
	}

	return nil
}

// CommitTransactionResponseMultiError is an error wrapping multiple validation
// errors returned by CommitTransactionResponse.ValidateAll() if the
// designated constraints aren't met.
type CommitTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitTransactionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitTransactionResponseMultiError) AllErrors() []error { return m }

// CommitTransactionResponseValidationError is the validation error returned by
// CommitTransactionResponse.Validate if the designated constraints aren't met.
type CommitTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitTransactionResponseValidationError) ErrorName() string {
	return "CommitTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommitTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommitTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitTransactionResponseValidationError{}

// Validate checks the field values on RollbackTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackTransactionRequestMultiError, or nil if none found.
func (m *RollbackTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTransactionId()) < 1 {
		err := RollbackTransactionRequestValidationError{
			field:  "TransactionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RollbackTransactionRequestMultiError(errors)
	}

	return nil
}

// RollbackTransactionRequestMultiError is an error wrapping multiple
// validation errors returned by RollbackTransactionRequest.ValidateAll() if
// the designated constraints aren't met.
type RollbackTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackTransactionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackTransactionRequestMultiError) AllErrors() []error { return m }

// RollbackTransactionRequestValidationError is the validation error returned
// by RollbackTransactionRequest.Validate if the designated constraints aren't met.
type RollbackTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackTransactionRequestValidationError) ErrorName() string {
	return "RollbackTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackTransactionRequestValidationError{}
