// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: worker/database/v1/wal_service.proto

package dbv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WALEntry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WALEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WALEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WALEntryMultiError, or nil
// if none found.
func (m *WALEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *WALEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetTarget()) < 1 {
		err := WALEntryValidationError{
			field:  "Target",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := MutationType_name[int32(m.GetOperationType())]; !ok {
		err := WALEntryValidationError{
			field:  "OperationType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OldValue

	// no validation rules for NewValue

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WALEntryValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WALEntryValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WALEntryValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WALEntryMultiError(errors)
	}

	return nil
}

// WALEntryMultiError is an error wrapping multiple validation errors returned
// by WALEntry.ValidateAll() if the designated constraints aren't met.
type WALEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WALEntryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WALEntryMultiError) AllErrors() []error { return m }

// WALEntryValidationError is the validation error returned by
// WALEntry.Validate if the designated constraints aren't met.
type WALEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WALEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WALEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WALEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WALEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WALEntryValidationError) ErrorName() string { return "WALEntryValidationError" }

// Error satisfies the builtin error interface
func (e WALEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWALEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WALEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WALEntryValidationError{}

// Validate checks the field values on ListWALEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWALEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWALEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWALEntriesRequestMultiError, or nil if none found.
func (m *ListWALEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWALEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPageSize(); val < 0 || val > 1000 {
		err := ListWALEntriesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [0, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWALEntriesRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWALEntriesRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWALEntriesRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWALEntriesRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWALEntriesRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWALEntriesRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TargetFilter

	if len(errors) > 0 {
		return ListWALEntriesRequestMultiError(errors)
	}

	return nil
}

// ListWALEntriesRequestMultiError is an error wrapping multiple validation
// errors returned by ListWALEntriesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWALEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWALEntriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWALEntriesRequestMultiError) AllErrors() []error { return m }

// ListWALEntriesRequestValidationError is the validation error returned by
// ListWALEntriesRequest.Validate if the designated constraints aren't met.
type ListWALEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWALEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWALEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWALEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWALEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWALEntriesRequestValidationError) ErrorName() string {
	return "ListWALEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWALEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWALEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWALEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWALEntriesRequestValidationError{}

// Validate checks the field values on ListWALEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWALEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWALEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWALEntriesResponseMultiError, or nil if none found.
func (m *ListWALEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWALEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWALEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWALEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWALEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListWALEntriesResponseMultiError(errors)
	}

	return nil
}

// ListWALEntriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListWALEntriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWALEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWALEntriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWALEntriesResponseMultiError) AllErrors() []error { return m }

// ListWALEntriesResponseValidationError is the validation error returned by
// ListWALEntriesResponse.Validate if the designated constraints aren't met.
type ListWALEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWALEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWALEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWALEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWALEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWALEntriesResponseValidationError) ErrorName() string {
	return "ListWALEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWALEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWALEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWALEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWALEntriesResponseValidationError{}

// Validate checks the field values on TruncateWALRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TruncateWALRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TruncateWALRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TruncateWALRequestMultiError, or nil if none found.
func (m *TruncateWALRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TruncateWALRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBefore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TruncateWALRequestValidationError{
					field:  "Before",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TruncateWALRequestValidationError{
					field:  "Before",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBefore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TruncateWALRequestValidationError{
				field:  "Before",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TruncateWALRequestMultiError(errors)
	}

	return nil
}

// TruncateWALRequestMultiError is an error wrapping multiple validation errors
// returned by TruncateWALRequest.ValidateAll() if the designated constraints
// aren't met.
type TruncateWALRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TruncateWALRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TruncateWALRequestMultiError) AllErrors() []error { return m }

// TruncateWALRequestValidationError is the validation error returned by
// TruncateWALRequest.Validate if the designated constraints aren't met.
type TruncateWALRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TruncateWALRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TruncateWALRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TruncateWALRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TruncateWALRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TruncateWALRequestValidationError) ErrorName() string {
	return "TruncateWALRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TruncateWALRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTruncateWALRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TruncateWALRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TruncateWALRequestValidationError{}
