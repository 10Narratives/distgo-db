// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: worker/database/v1/collection_service.proto

package dbv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Collection with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Collection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Collection with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CollectionMultiError, or
// nil if none found.
func (m *Collection) ValidateAll() error {
	return m.validate(true)
}

func (m *Collection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetDescription()) > 1024 {
		err := CollectionValidationError{
			field:  "Description",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionMultiError(errors)
	}

	return nil
}

// CollectionMultiError is an error wrapping multiple validation errors
// returned by Collection.ValidateAll() if the designated constraints aren't met.
type CollectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionMultiError) AllErrors() []error { return m }

// CollectionValidationError is the validation error returned by
// Collection.Validate if the designated constraints aren't met.
type CollectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionValidationError) ErrorName() string { return "CollectionValidationError" }

// Error satisfies the builtin error interface
func (e CollectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionValidationError{}

// Validate checks the field values on ListCollectionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCollectionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCollectionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCollectionsRequestMultiError, or nil if none found.
func (m *ListCollectionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCollectionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListCollectionsRequest_Parent_Pattern.MatchString(m.GetParent()) {
		err := ListCollectionsRequestValidationError{
			field:  "Parent",
			reason: "value does not match regex pattern \"^databases\\\\/[^\\\\/]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 0 || val > 1000 {
		err := ListCollectionsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [0, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListCollectionsRequestMultiError(errors)
	}

	return nil
}

// ListCollectionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCollectionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCollectionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCollectionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCollectionsRequestMultiError) AllErrors() []error { return m }

// ListCollectionsRequestValidationError is the validation error returned by
// ListCollectionsRequest.Validate if the designated constraints aren't met.
type ListCollectionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCollectionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCollectionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCollectionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCollectionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCollectionsRequestValidationError) ErrorName() string {
	return "ListCollectionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCollectionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCollectionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCollectionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCollectionsRequestValidationError{}

var _ListCollectionsRequest_Parent_Pattern = regexp.MustCompile("^databases\\/[^\\/]+$")

// Validate checks the field values on ListCollectionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCollectionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCollectionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCollectionsResponseMultiError, or nil if none found.
func (m *ListCollectionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCollectionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCollectionsResponseValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCollectionsResponseValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCollectionsResponseValidationError{
					field:  fmt.Sprintf("Collections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListCollectionsResponseMultiError(errors)
	}

	return nil
}

// ListCollectionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCollectionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCollectionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCollectionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCollectionsResponseMultiError) AllErrors() []error { return m }

// ListCollectionsResponseValidationError is the validation error returned by
// ListCollectionsResponse.Validate if the designated constraints aren't met.
type ListCollectionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCollectionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCollectionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCollectionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCollectionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCollectionsResponseValidationError) ErrorName() string {
	return "ListCollectionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCollectionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCollectionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCollectionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCollectionsResponseValidationError{}

// Validate checks the field values on GetCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionRequestMultiError, or nil if none found.
func (m *GetCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetCollectionRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GetCollectionRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^databases\\\\/[^\\\\/]+\\\\/collections\\\\/[^\\\\/]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCollectionRequestMultiError(errors)
	}

	return nil
}

// GetCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by GetCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionRequestMultiError) AllErrors() []error { return m }

// GetCollectionRequestValidationError is the validation error returned by
// GetCollectionRequest.Validate if the designated constraints aren't met.
type GetCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionRequestValidationError) ErrorName() string {
	return "GetCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionRequestValidationError{}

var _GetCollectionRequest_Name_Pattern = regexp.MustCompile("^databases\\/[^\\/]+\\/collections\\/[^\\/]+$")

// Validate checks the field values on CreateCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCollectionRequestMultiError, or nil if none found.
func (m *CreateCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateCollectionRequest_Parent_Pattern.MatchString(m.GetParent()) {
		err := CreateCollectionRequestValidationError{
			field:  "Parent",
			reason: "value does not match regex pattern \"^databases\\\\/[^\\\\/]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCollectionId() != "" {

		if l := utf8.RuneCountInString(m.GetCollectionId()); l < 1 || l > 64 {
			err := CreateCollectionRequestValidationError{
				field:  "CollectionId",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_CreateCollectionRequest_CollectionId_Pattern.MatchString(m.GetCollectionId()) {
			err := CreateCollectionRequestValidationError{
				field:  "CollectionId",
				reason: "value does not match regex pattern \"^[a-zA-Z0-9\\\\-_.]*$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetCollection() == nil {
		err := CreateCollectionRequestValidationError{
			field:  "Collection",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCollectionRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCollectionRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCollectionRequestValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCollectionRequestMultiError(errors)
	}

	return nil
}

// CreateCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCollectionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCollectionRequestMultiError) AllErrors() []error { return m }

// CreateCollectionRequestValidationError is the validation error returned by
// CreateCollectionRequest.Validate if the designated constraints aren't met.
type CreateCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCollectionRequestValidationError) ErrorName() string {
	return "CreateCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCollectionRequestValidationError{}

var _CreateCollectionRequest_Parent_Pattern = regexp.MustCompile("^databases\\/[^\\/]+$")

var _CreateCollectionRequest_CollectionId_Pattern = regexp.MustCompile("^[a-zA-Z0-9\\-_.]*$")

// Validate checks the field values on UpdateCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCollectionRequestMultiError, or nil if none found.
func (m *UpdateCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCollection() == nil {
		err := UpdateCollectionRequestValidationError{
			field:  "Collection",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCollectionRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCollectionRequestValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCollectionRequestValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCollectionRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCollectionRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCollectionRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCollectionRequestMultiError(errors)
	}

	return nil
}

// UpdateCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCollectionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCollectionRequestMultiError) AllErrors() []error { return m }

// UpdateCollectionRequestValidationError is the validation error returned by
// UpdateCollectionRequest.Validate if the designated constraints aren't met.
type UpdateCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCollectionRequestValidationError) ErrorName() string {
	return "UpdateCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCollectionRequestValidationError{}

// Validate checks the field values on DeleteCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCollectionRequestMultiError, or nil if none found.
func (m *DeleteCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DeleteCollectionRequest_Name_Pattern.MatchString(m.GetName()) {
		err := DeleteCollectionRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^databases\\\\/[^\\\\/]+\\\\/collections\\\\/[^\\\\/]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCollectionRequestMultiError(errors)
	}

	return nil
}

// DeleteCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCollectionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCollectionRequestMultiError) AllErrors() []error { return m }

// DeleteCollectionRequestValidationError is the validation error returned by
// DeleteCollectionRequest.Validate if the designated constraints aren't met.
type DeleteCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCollectionRequestValidationError) ErrorName() string {
	return "DeleteCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCollectionRequestValidationError{}

var _DeleteCollectionRequest_Name_Pattern = regexp.MustCompile("^databases\\/[^\\/]+\\/collections\\/[^\\/]+$")
