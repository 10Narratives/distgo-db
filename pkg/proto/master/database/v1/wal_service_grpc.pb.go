// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: master/database/v1/wal_service.proto

package mdbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WALService_ListWALEntries_FullMethodName = "/master.database.v1.WALService/ListWALEntries"
	WALService_TruncateWAL_FullMethodName    = "/master.database.v1.WALService/TruncateWAL"
)

// WALServiceClient is the client API for WALService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WALServiceClient interface {
	ListWALEntries(ctx context.Context, in *ListWALEntriesRequest, opts ...grpc.CallOption) (*ListWALEntriesResponse, error)
	TruncateWAL(ctx context.Context, in *TruncateWALRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type wALServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWALServiceClient(cc grpc.ClientConnInterface) WALServiceClient {
	return &wALServiceClient{cc}
}

func (c *wALServiceClient) ListWALEntries(ctx context.Context, in *ListWALEntriesRequest, opts ...grpc.CallOption) (*ListWALEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWALEntriesResponse)
	err := c.cc.Invoke(ctx, WALService_ListWALEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wALServiceClient) TruncateWAL(ctx context.Context, in *TruncateWALRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WALService_TruncateWAL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WALServiceServer is the server API for WALService service.
// All implementations must embed UnimplementedWALServiceServer
// for forward compatibility.
type WALServiceServer interface {
	ListWALEntries(context.Context, *ListWALEntriesRequest) (*ListWALEntriesResponse, error)
	TruncateWAL(context.Context, *TruncateWALRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedWALServiceServer()
}

// UnimplementedWALServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWALServiceServer struct{}

func (UnimplementedWALServiceServer) ListWALEntries(context.Context, *ListWALEntriesRequest) (*ListWALEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWALEntries not implemented")
}
func (UnimplementedWALServiceServer) TruncateWAL(context.Context, *TruncateWALRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateWAL not implemented")
}
func (UnimplementedWALServiceServer) mustEmbedUnimplementedWALServiceServer() {}
func (UnimplementedWALServiceServer) testEmbeddedByValue()                    {}

// UnsafeWALServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WALServiceServer will
// result in compilation errors.
type UnsafeWALServiceServer interface {
	mustEmbedUnimplementedWALServiceServer()
}

func RegisterWALServiceServer(s grpc.ServiceRegistrar, srv WALServiceServer) {
	// If the following call pancis, it indicates UnimplementedWALServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WALService_ServiceDesc, srv)
}

func _WALService_ListWALEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWALEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WALServiceServer).ListWALEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WALService_ListWALEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WALServiceServer).ListWALEntries(ctx, req.(*ListWALEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WALService_TruncateWAL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateWALRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WALServiceServer).TruncateWAL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WALService_TruncateWAL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WALServiceServer).TruncateWAL(ctx, req.(*TruncateWALRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WALService_ServiceDesc is the grpc.ServiceDesc for WALService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WALService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.database.v1.WALService",
	HandlerType: (*WALServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWALEntries",
			Handler:    _WALService_ListWALEntries_Handler,
		},
		{
			MethodName: "TruncateWAL",
			Handler:    _WALService_TruncateWAL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master/database/v1/wal_service.proto",
}
