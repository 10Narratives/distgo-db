syntax = "proto3";

package worker.database.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option java_multiple_files = true;
option java_package = "com.google.worker.database.v1";
option go_package = "github.com/10Narratives/distgo-db/pkg/proto/worker/database/v1;dbv1";

message Document {
  option (google.api.resource) = {
    type: "worker.database.v1/Document"
    pattern: "projects/{project}/databases/{database}/documents/{document}"
  };
  string name = 1 [(validate.rules).string.uuid = true];
  google.protobuf.Struct content = 2 [(validate.rules).message.required = true];
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
}

message ListDocumentsRequest {
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "worker.database.v1/Database"
    },
    (validate.rules).string.pattern = "projects/.*/databases/.*"
  ];
  int32 page_size = 2 [
    (validate.rules).int32.gte = 1,
    (validate.rules).int32.lte = 100
  ];
  string page_token = 3;
}

message GetDocumentRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "worker.database.v1/Document"
    },
    (validate.rules).string.uuid = true
  ];
}

message CreateDocumentRequest {
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "worker.database.v1/Database"
    },
    (validate.rules).string.pattern = "projects/.*/databases/.*"
  ];
  string document_id = 2 [
    (validate.rules).string.uuid = true
  ];
  Document document = 3 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).message.required = true
  ];
}

message UpdateDocumentRequest {
  Document document = 1 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).message.required = true
  ];
  google.protobuf.FieldMask update_mask = 2 [
    (google.api.field_behavior) = OPTIONAL
  ];
}

message DeleteDocumentRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "worker.database.v1/Document"
    },
    (validate.rules).string.min_len = 1
  ];
}

message ListDocumentsResponse {
  repeated Document documents = 1;
  string next_page_token = 2;
}

service DocumentService {
  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{parent=projects/*/databases/*}/Documents"
    };
  }

  rpc GetDocument(GetDocumentRequest) returns (Document) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=projects/*/databases/*/documents/*}"
    };
  }

  rpc CreateDocument(CreateDocumentRequest) returns (Document) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=projects/*/databases/*}/Documents"
      body: "document"
    };
  }

  rpc UpdateDocument(UpdateDocumentRequest) returns (Document) {
    option (google.api.http) = {
      patch: "/v1alpha1/{document.name=projects/*/databases/*/documents/*}"
      body: "document"
    };
  }

  rpc DeleteDocument(DeleteDocumentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=projects/*/databases/*/documents/*}"
    };
  }
}