syntax = "proto3";

package worker.database.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

import "validate/validate.proto";

option java_multiple_files = true;
option java_package = "com.google.worker.database.v1";
option go_package = "github.com/10Narratives/distgo-db/pkg/proto/worker/database/v1;dbv1";

message Collection {
  option (google.api.resource) = {
    type: "documentdb.myorg.com/Collection"
    pattern: "collections/{collection_id}"
  };

  string name = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IMMUTABLE
  ];

  string display_name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).string = {min_len: 1, max_len: 100}
  ];

  google.protobuf.Timestamp create_time = 3 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  google.protobuf.Timestamp update_time = 4 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

message Document {
  option (google.api.resource) = {
    type: "documentdb.myorg.com/Document"
    pattern: "collections/{collection_id}/documents/{document_id}"
  };

  string name = 1 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IMMUTABLE
  ];

  string content = 2 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).string = {min_len: 1}
  ];

  google.protobuf.Timestamp create_time = 3 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  google.protobuf.Timestamp update_time = 4 [
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  string etag = 5;
}

message TransactionOperation {
  oneof operation {
    CreateDocumentOp create_document = 1;
    UpdateDocumentOp update_document = 2;
    DeleteDocumentOp delete_document = 3;
  }
}

message CreateDocumentOp {
  string parent = 1 [
    (validate.rules).string = {min_len: 1}
  ];
  
  Document document = 2 [
    (validate.rules).message.required = true
  ];
  
  string document_id = 3 [
    (validate.rules).string = {uuid: true}
  ];
}

message UpdateDocumentOp {
  Document document = 1 [
    (validate.rules).message.required = true
  ];
  
  google.protobuf.FieldMask update_mask = 2;
  
  string if_match = 3;
}

message DeleteDocumentOp {
  string name = 1 [
    (validate.rules).string = {min_len: 1}
  ];
  
  string if_match = 2;
}

message CommitTransactionRequest {
  string transaction_id = 1 [
    (validate.rules).string = {uuid: true}
  ];
  
  repeated TransactionOperation operations = 2 [
    (validate.rules).repeated = {min_items: 1, max_items: 100}
  ];
  
  int32 timeout_seconds = 3 [
    (validate.rules).int32 = {gte: 1, lte: 60}
  ];
}

message OperationResult {
  oneof result {
    Document document = 1;
    google.protobuf.Empty deleted = 2;
  }
  
  int32 operation_index = 3;
}

message CommitTransactionResponse {
  repeated OperationResult results = 1;
  google.protobuf.Timestamp commit_time = 2;
}

message BeginTransactionRequest {
  string parent = 1;
  
  int32 timeout_seconds = 2 [
    (validate.rules).int32 = {gte: 1, lte: 60}
  ];
}

message BeginTransactionResponse {
  string transaction_id = 1 [
    (validate.rules).string = {uuid: true}
  ];
}

message RollbackTransactionRequest {
  string transaction_id = 1 [
    (validate.rules).string = {uuid: true}
  ];
}

service DocumentService {
  rpc CreateDocument(CreateDocumentRequest) returns (Document) {
    option (google.api.http) = {
      post: "/v1/{parent=collections/*}/documents"
      body: "document"
    };
  }

  rpc GetDocument(GetDocumentRequest) returns (Document) {
    option (google.api.http) = {
      get: "/v1/{name=collections/*/documents/*}"
    };
  }

  rpc UpdateDocument(UpdateDocumentRequest) returns (Document) {
    option (google.api.http) = {
      patch: "/v1/{document.name=collections/*/documents/*}"
      body: "document"
    };
  }

  rpc DeleteDocument(DeleteDocumentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=collections/*/documents/*}"
    };
  }

  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=collections/*}/documents"
    };
  }

  rpc CreateCollection(CreateCollectionRequest) returns (Collection) {
    option (google.api.http) = {
      post: "/v1/collections"
      body: "collection"
    };
  }

  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse) {
    option (google.api.http) = {
      get: "/v1/collections"
    };
  }

  rpc CommitTransaction(CommitTransactionRequest) returns (CommitTransactionResponse) {
    option (google.api.http) = {
      post: "/v1/transactions:commit"
      body: "*"
    };
  }
  
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse) {
    option (google.api.http) = {
      post: "/v1/transactions:begin"
      body: "*"
    };
  }
  
  rpc RollbackTransaction(RollbackTransactionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/transactions:rollback"
      body: "*"
    };
  }
}

message CreateDocumentRequest {
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "documentdb.myorg.com/Collection"
    },
    (validate.rules).string = {min_len: 1}
  ];
  
  Document document = 2 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).message.required = true
  ];
  
  string document_id = 3 [
    (validate.rules).string = {uuid: true}
  ];
}

message GetDocumentRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "documentdb.myorg.com/Document"
    },
    (validate.rules).string = {min_len: 1}
  ];
}

message UpdateDocumentRequest {
  Document document = 1 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).message.required = true
  ];
  
  google.protobuf.FieldMask update_mask = 2;
  
  string if_match = 3;
}

message DeleteDocumentRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "documentdb.myorg.com/Document"
    },
    (validate.rules).string = {min_len: 1}
  ];
  
  string if_match = 2;
}

message ListDocumentsRequest {
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "documentdb.myorg.com/Collection"
    },
    (validate.rules).string = {min_len: 1}
  ];
  
  int32 page_size = 2 [
    (validate.rules).int32 = {gte: 1, lte: 1000}
  ];
  
  string page_token = 3;
  string filter = 4;
  string order_by = 5;
}

message ListDocumentsResponse {
  repeated Document documents = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

message CreateCollectionRequest {
  Collection collection = 1 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).message.required = true
  ];
  
  string collection_id = 2 [
    (validate.rules).string = {uuid: true}
  ];
}

message ListCollectionsRequest {
  int32 page_size = 1 [
    (validate.rules).int32 = {gte: 1, lte: 1000}
  ];
  
  string page_token = 2;
}

message ListCollectionsResponse {
  repeated Collection collections = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}