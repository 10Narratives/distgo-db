// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	collectionmodels "github.com/10Narratives/distgo-db/internal/models/worker/data/collection"

	mock "github.com/stretchr/testify/mock"
)

// CollectionService is an autogenerated mock type for the CollectionService type
type CollectionService struct {
	mock.Mock
}

// Collection provides a mock function with given fields: ctx, name
func (_m *CollectionService) Collection(ctx context.Context, name string) (collectionmodels.Collection, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 collectionmodels.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (collectionmodels.Collection, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) collectionmodels.Collection); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(collectionmodels.Collection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collections provides a mock function with given fields: ctx, parent, size, token
func (_m *CollectionService) Collections(ctx context.Context, parent string, size int32, token string) ([]collectionmodels.Collection, string, error) {
	ret := _m.Called(ctx, parent, size, token)

	if len(ret) == 0 {
		panic("no return value specified for Collections")
	}

	var r0 []collectionmodels.Collection
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, string) ([]collectionmodels.Collection, string, error)); ok {
		return rf(ctx, parent, size, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, string) []collectionmodels.Collection); ok {
		r0 = rf(ctx, parent, size, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]collectionmodels.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32, string) string); ok {
		r1 = rf(ctx, parent, size, token)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int32, string) error); ok {
		r2 = rf(ctx, parent, size, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateCollection provides a mock function with given fields: ctx, parent, collectionID
func (_m *CollectionService) CreateCollection(ctx context.Context, parent string, collectionID string) (collectionmodels.Collection, error) {
	ret := _m.Called(ctx, parent, collectionID)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 collectionmodels.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (collectionmodels.Collection, error)); ok {
		return rf(ctx, parent, collectionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) collectionmodels.Collection); ok {
		r0 = rf(ctx, parent, collectionID)
	} else {
		r0 = ret.Get(0).(collectionmodels.Collection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, parent, collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCollection provides a mock function with given fields: ctx, name
func (_m *CollectionService) DeleteCollection(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCollection provides a mock function with given fields: ctx, collection, paths
func (_m *CollectionService) UpdateCollection(ctx context.Context, collection collectionmodels.Collection, paths []string) (collectionmodels.Collection, error) {
	ret := _m.Called(ctx, collection, paths)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCollection")
	}

	var r0 collectionmodels.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, collectionmodels.Collection, []string) (collectionmodels.Collection, error)); ok {
		return rf(ctx, collection, paths)
	}
	if rf, ok := ret.Get(0).(func(context.Context, collectionmodels.Collection, []string) collectionmodels.Collection); ok {
		r0 = rf(ctx, collection, paths)
	} else {
		r0 = ret.Get(0).(collectionmodels.Collection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, collectionmodels.Collection, []string) error); ok {
		r1 = rf(ctx, collection, paths)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCollectionService creates a new instance of CollectionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionService {
	mock := &CollectionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
