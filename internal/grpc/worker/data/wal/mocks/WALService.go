// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	walmodels "github.com/10Narratives/distgo-db/internal/models/worker/data/wal"
)

// WALService is an autogenerated mock type for the WALService type
type WALService struct {
	mock.Mock
}

// TruncateWAL provides a mock function with given fields: ctx, before
func (_m *WALService) TruncateWAL(ctx context.Context, before time.Time) error {
	ret := _m.Called(ctx, before)

	if len(ret) == 0 {
		panic("no return value specified for TruncateWAL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = rf(ctx, before)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WALEntries provides a mock function with given fields: ctx, size, token, from, to
func (_m *WALService) WALEntries(ctx context.Context, size int32, token string, from time.Time, to time.Time) []walmodels.WALEntry {
	ret := _m.Called(ctx, size, token, from, to)

	if len(ret) == 0 {
		panic("no return value specified for WALEntries")
	}

	var r0 []walmodels.WALEntry
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, time.Time, time.Time) []walmodels.WALEntry); ok {
		r0 = rf(ctx, size, token, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]walmodels.WALEntry)
		}
	}

	return r0
}

// NewWALService creates a new instance of WALService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWALService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WALService {
	mock := &WALService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
