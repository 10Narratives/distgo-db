// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	databasemodels "github.com/10Narratives/distgo-db/internal/models/worker/data/database"

	mock "github.com/stretchr/testify/mock"
)

// DatabaseService is an autogenerated mock type for the DatabaseService type
type DatabaseService struct {
	mock.Mock
}

// CreateDatabase provides a mock function with given fields: ctx, databaseID, displayName
func (_m *DatabaseService) CreateDatabase(ctx context.Context, databaseID string, displayName string) (databasemodels.Database, error) {
	ret := _m.Called(ctx, databaseID, displayName)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabase")
	}

	var r0 databasemodels.Database
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (databasemodels.Database, error)); ok {
		return rf(ctx, databaseID, displayName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) databasemodels.Database); ok {
		r0 = rf(ctx, databaseID, displayName)
	} else {
		r0 = ret.Get(0).(databasemodels.Database)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, databaseID, displayName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database provides a mock function with given fields: ctx, name
func (_m *DatabaseService) Database(ctx context.Context, name string) (databasemodels.Database, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 databasemodels.Database
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (databasemodels.Database, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) databasemodels.Database); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(databasemodels.Database)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Databases provides a mock function with given fields: ctx, size, token
func (_m *DatabaseService) Databases(ctx context.Context, size int32, token string) ([]databasemodels.Database, string, error) {
	ret := _m.Called(ctx, size, token)

	if len(ret) == 0 {
		panic("no return value specified for Databases")
	}

	var r0 []databasemodels.Database
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) ([]databasemodels.Database, string, error)); ok {
		return rf(ctx, size, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) []databasemodels.Database); ok {
		r0 = rf(ctx, size, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]databasemodels.Database)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string) string); ok {
		r1 = rf(ctx, size, token)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int32, string) error); ok {
		r2 = rf(ctx, size, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteDatabase provides a mock function with given fields: ctx, name
func (_m *DatabaseService) DeleteDatabase(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDatabase provides a mock function with given fields: ctx, database, paths
func (_m *DatabaseService) UpdateDatabase(ctx context.Context, database databasemodels.Database, paths []string) (databasemodels.Database, error) {
	ret := _m.Called(ctx, database, paths)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatabase")
	}

	var r0 databasemodels.Database
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, databasemodels.Database, []string) (databasemodels.Database, error)); ok {
		return rf(ctx, database, paths)
	}
	if rf, ok := ret.Get(0).(func(context.Context, databasemodels.Database, []string) databasemodels.Database); ok {
		r0 = rf(ctx, database, paths)
	} else {
		r0 = ret.Get(0).(databasemodels.Database)
	}

	if rf, ok := ret.Get(1).(func(context.Context, databasemodels.Database, []string) error); ok {
		r1 = rf(ctx, database, paths)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDatabaseService creates a new instance of DatabaseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseService {
	mock := &DatabaseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
