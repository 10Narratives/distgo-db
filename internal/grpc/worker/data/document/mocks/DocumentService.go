// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	documentmodels "github.com/10Narratives/distgo-db/internal/models/worker/data/document"

	mock "github.com/stretchr/testify/mock"
)

// DocumentService is an autogenerated mock type for the DocumentService type
type DocumentService struct {
	mock.Mock
}

// CreateDocument provides a mock function with given fields: ctx, parent, documentID, value
func (_m *DocumentService) CreateDocument(ctx context.Context, parent string, documentID string, value string) (documentmodels.Document, error) {
	ret := _m.Called(ctx, parent, documentID, value)

	if len(ret) == 0 {
		panic("no return value specified for CreateDocument")
	}

	var r0 documentmodels.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (documentmodels.Document, error)); ok {
		return rf(ctx, parent, documentID, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) documentmodels.Document); ok {
		r0 = rf(ctx, parent, documentID, value)
	} else {
		r0 = ret.Get(0).(documentmodels.Document)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, parent, documentID, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDocument provides a mock function with given fields: ctx, name
func (_m *DocumentService) DeleteDocument(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Document provides a mock function with given fields: ctx, name
func (_m *DocumentService) Document(ctx context.Context, name string) (documentmodels.Document, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Document")
	}

	var r0 documentmodels.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (documentmodels.Document, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) documentmodels.Document); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(documentmodels.Document)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Documents provides a mock function with given fields: ctx, parent, size, token
func (_m *DocumentService) Documents(ctx context.Context, parent string, size int32, token string) ([]documentmodels.Document, string, error) {
	ret := _m.Called(ctx, parent, size, token)

	if len(ret) == 0 {
		panic("no return value specified for Documents")
	}

	var r0 []documentmodels.Document
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, string) ([]documentmodels.Document, string, error)); ok {
		return rf(ctx, parent, size, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, string) []documentmodels.Document); ok {
		r0 = rf(ctx, parent, size, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]documentmodels.Document)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32, string) string); ok {
		r1 = rf(ctx, parent, size, token)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int32, string) error); ok {
		r2 = rf(ctx, parent, size, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateDocument provides a mock function with given fields: ctx, document, paths
func (_m *DocumentService) UpdateDocument(ctx context.Context, document documentmodels.Document, paths []string) (documentmodels.Document, error) {
	ret := _m.Called(ctx, document, paths)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDocument")
	}

	var r0 documentmodels.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, documentmodels.Document, []string) (documentmodels.Document, error)); ok {
		return rf(ctx, document, paths)
	}
	if rf, ok := ret.Get(0).(func(context.Context, documentmodels.Document, []string) documentmodels.Document); ok {
		r0 = rf(ctx, document, paths)
	} else {
		r0 = ret.Get(0).(documentmodels.Document)
	}

	if rf, ok := ret.Get(1).(func(context.Context, documentmodels.Document, []string) error); ok {
		r1 = rf(ctx, document, paths)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDocumentService creates a new instance of DocumentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDocumentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DocumentService {
	mock := &DocumentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
