// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	walmodels "github.com/10Narratives/distgo-db/internal/models/worker/wal"
	mock "github.com/stretchr/testify/mock"
)

// WALStorage is an autogenerated mock type for the WALStorage type
type WALStorage struct {
	mock.Mock
}

// Replay provides a mock function with given fields: handler
func (_m *WALStorage) Replay(handler func(walmodels.Entry) error) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for Replay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(walmodels.Entry) error) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Write provides a mock function with given fields: entry
func (_m *WALStorage) Write(entry walmodels.Entry) error {
	ret := _m.Called(entry)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(walmodels.Entry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWALStorage creates a new instance of WALStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWALStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *WALStorage {
	mock := &WALStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
