// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	documentmodels "github.com/10Narratives/distgo-db/internal/models/worker/document"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// DocumentStorage is an autogenerated mock type for the DocumentStorage type
type DocumentStorage struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, collection, documentID
func (_m *DocumentStorage) Get(ctx context.Context, collection string, documentID uuid.UUID) (documentmodels.Document, error) {
	ret := _m.Called(ctx, collection, documentID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 documentmodels.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) (documentmodels.Document, error)); ok {
		return rf(ctx, collection, documentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) documentmodels.Document); ok {
		r0 = rf(ctx, collection, documentID)
	} else {
		r0 = ret.Get(0).(documentmodels.Document)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID) error); ok {
		r1 = rf(ctx, collection, documentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, collection, documentID, content
func (_m *DocumentStorage) Set(ctx context.Context, collection string, documentID uuid.UUID, content map[string]interface{}) {
	_m.Called(ctx, collection, documentID, content)
}

// NewDocumentStorage creates a new instance of DocumentStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDocumentStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *DocumentStorage {
	mock := &DocumentStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
