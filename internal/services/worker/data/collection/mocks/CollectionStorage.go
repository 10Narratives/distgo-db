// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	collectionmodels "github.com/10Narratives/distgo-db/internal/models/worker/data/collection"

	context "context"

	databasemodels "github.com/10Narratives/distgo-db/internal/models/worker/data/database"

	mock "github.com/stretchr/testify/mock"
)

// CollectionStorage is an autogenerated mock type for the CollectionStorage type
type CollectionStorage struct {
	mock.Mock
}

// Collection provides a mock function with given fields: ctx, key
func (_m *CollectionStorage) Collection(ctx context.Context, key collectionmodels.Key) (collectionmodels.Collection, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 collectionmodels.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, collectionmodels.Key) (collectionmodels.Collection, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, collectionmodels.Key) collectionmodels.Collection); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(collectionmodels.Collection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, collectionmodels.Key) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collections provides a mock function with given fields: ctx, parentKey
func (_m *CollectionStorage) Collections(ctx context.Context, parentKey databasemodels.Key) []collectionmodels.Collection {
	ret := _m.Called(ctx, parentKey)

	if len(ret) == 0 {
		panic("no return value specified for Collections")
	}

	var r0 []collectionmodels.Collection
	if rf, ok := ret.Get(0).(func(context.Context, databasemodels.Key) []collectionmodels.Collection); ok {
		r0 = rf(ctx, parentKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]collectionmodels.Collection)
		}
	}

	return r0
}

// CreateCollection provides a mock function with given fields: ctx, key, description
func (_m *CollectionStorage) CreateCollection(ctx context.Context, key collectionmodels.Key, description string) (collectionmodels.Collection, error) {
	ret := _m.Called(ctx, key, description)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 collectionmodels.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, collectionmodels.Key, string) (collectionmodels.Collection, error)); ok {
		return rf(ctx, key, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, collectionmodels.Key, string) collectionmodels.Collection); ok {
		r0 = rf(ctx, key, description)
	} else {
		r0 = ret.Get(0).(collectionmodels.Collection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, collectionmodels.Key, string) error); ok {
		r1 = rf(ctx, key, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCollection provides a mock function with given fields: ctx, key
func (_m *CollectionStorage) DeleteCollection(ctx context.Context, key collectionmodels.Key) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collectionmodels.Key) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCollection provides a mock function with given fields: ctx, key, description
func (_m *CollectionStorage) UpdateCollection(ctx context.Context, key collectionmodels.Key, description string) error {
	ret := _m.Called(ctx, key, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collectionmodels.Key, string) error); ok {
		r0 = rf(ctx, key, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCollectionStorage creates a new instance of CollectionStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollectionStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *CollectionStorage {
	mock := &CollectionStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
