// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	collectionmodels "github.com/10Narratives/distgo-db/internal/models/worker/data/collection"

	documentmodels "github.com/10Narratives/distgo-db/internal/models/worker/data/document"

	mock "github.com/stretchr/testify/mock"
)

// DocumentStorage is an autogenerated mock type for the DocumentStorage type
type DocumentStorage struct {
	mock.Mock
}

// CreateDocument provides a mock function with given fields: ctx, key, value
func (_m *DocumentStorage) CreateDocument(ctx context.Context, key documentmodels.Key, value string) (documentmodels.Document, error) {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for CreateDocument")
	}

	var r0 documentmodels.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, documentmodels.Key, string) (documentmodels.Document, error)); ok {
		return rf(ctx, key, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, documentmodels.Key, string) documentmodels.Document); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Get(0).(documentmodels.Document)
	}

	if rf, ok := ret.Get(1).(func(context.Context, documentmodels.Key, string) error); ok {
		r1 = rf(ctx, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDocument provides a mock function with given fields: ctx, key
func (_m *DocumentStorage) DeleteDocument(ctx context.Context, key documentmodels.Key) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, documentmodels.Key) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Document provides a mock function with given fields: ctx, key
func (_m *DocumentStorage) Document(ctx context.Context, key documentmodels.Key) (documentmodels.Document, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Document")
	}

	var r0 documentmodels.Document
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, documentmodels.Key) (documentmodels.Document, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, documentmodels.Key) documentmodels.Document); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(documentmodels.Document)
	}

	if rf, ok := ret.Get(1).(func(context.Context, documentmodels.Key) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Documents provides a mock function with given fields: ctx, parent
func (_m *DocumentStorage) Documents(ctx context.Context, parent collectionmodels.Key) []documentmodels.Document {
	ret := _m.Called(ctx, parent)

	if len(ret) == 0 {
		panic("no return value specified for Documents")
	}

	var r0 []documentmodels.Document
	if rf, ok := ret.Get(0).(func(context.Context, collectionmodels.Key) []documentmodels.Document); ok {
		r0 = rf(ctx, parent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]documentmodels.Document)
		}
	}

	return r0
}

// UpdateDocument provides a mock function with given fields: ctx, document
func (_m *DocumentStorage) UpdateDocument(ctx context.Context, document documentmodels.Document) error {
	ret := _m.Called(ctx, document)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, documentmodels.Document) error); ok {
		r0 = rf(ctx, document)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDocumentStorage creates a new instance of DocumentStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDocumentStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *DocumentStorage {
	mock := &DocumentStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
