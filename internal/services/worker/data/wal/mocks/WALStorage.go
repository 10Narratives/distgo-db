// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	walmodels "github.com/10Narratives/distgo-db/internal/models/worker/data/wal"
)

// WALStorage is an autogenerated mock type for the WALStorage type
type WALStorage struct {
	mock.Mock
}

// Append provides a mock function with given fields: ctx, entry
func (_m *WALStorage) Append(ctx context.Context, entry walmodels.WALEntry) error {
	ret := _m.Called(ctx, entry)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, walmodels.WALEntry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Entries provides a mock function with given fields: ctx, size, token, from, to
func (_m *WALStorage) Entries(ctx context.Context, size int32, token string, from time.Time, to time.Time) ([]walmodels.WALEntry, string, error) {
	ret := _m.Called(ctx, size, token, from, to)

	if len(ret) == 0 {
		panic("no return value specified for Entries")
	}

	var r0 []walmodels.WALEntry
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, time.Time, time.Time) ([]walmodels.WALEntry, string, error)); ok {
		return rf(ctx, size, token, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, time.Time, time.Time) []walmodels.WALEntry); ok {
		r0 = rf(ctx, size, token, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]walmodels.WALEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string, time.Time, time.Time) string); ok {
		r1 = rf(ctx, size, token, from, to)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int32, string, time.Time, time.Time) error); ok {
		r2 = rf(ctx, size, token, from, to)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Truncate provides a mock function with given fields: ctx, before
func (_m *WALStorage) Truncate(ctx context.Context, before time.Time) error {
	ret := _m.Called(ctx, before)

	if len(ret) == 0 {
		panic("no return value specified for Truncate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = rf(ctx, before)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWALStorage creates a new instance of WALStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWALStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *WALStorage {
	mock := &WALStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
