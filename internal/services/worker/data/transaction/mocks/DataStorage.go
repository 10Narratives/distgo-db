// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	walmodels "github.com/10Narratives/distgo-db/internal/models/worker/data/wal"
)

// DataStorage is an autogenerated mock type for the DataStorage type
type DataStorage struct {
	mock.Mock
}

// RecoverCollection provides a mock function with given fields: entry
func (_m *DataStorage) RecoverCollection(entry walmodels.WALEntry) error {
	ret := _m.Called(entry)

	if len(ret) == 0 {
		panic("no return value specified for RecoverCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(walmodels.WALEntry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecoverDatabase provides a mock function with given fields: entry
func (_m *DataStorage) RecoverDatabase(entry walmodels.WALEntry) error {
	ret := _m.Called(entry)

	if len(ret) == 0 {
		panic("no return value specified for RecoverDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(walmodels.WALEntry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecoverDocument provides a mock function with given fields: entry
func (_m *DataStorage) RecoverDocument(entry walmodels.WALEntry) error {
	ret := _m.Called(entry)

	if len(ret) == 0 {
		panic("no return value specified for RecoverDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(walmodels.WALEntry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDataStorage creates a new instance of DataStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataStorage {
	mock := &DataStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
