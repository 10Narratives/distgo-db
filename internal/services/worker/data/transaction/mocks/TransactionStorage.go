// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	transactionmodels "github.com/10Narratives/distgo-db/internal/models/worker/data/transaction"
	mock "github.com/stretchr/testify/mock"
)

// TransactionStorage is an autogenerated mock type for the TransactionStorage type
type TransactionStorage struct {
	mock.Mock
}

// DeleteTransaction provides a mock function with given fields: ctx, transactionID
func (_m *TransactionStorage) DeleteTransaction(ctx context.Context, transactionID string) error {
	ret := _m.Called(ctx, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, transactionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTransaction provides a mock function with given fields: ctx, meta
func (_m *TransactionStorage) SaveTransaction(ctx context.Context, meta transactionmodels.TransactionMetadata) error {
	ret := _m.Called(ctx, meta)

	if len(ret) == 0 {
		panic("no return value specified for SaveTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transactionmodels.TransactionMetadata) error); ok {
		r0 = rf(ctx, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transaction provides a mock function with given fields: ctx, transactionID
func (_m *TransactionStorage) Transaction(ctx context.Context, transactionID string) (transactionmodels.TransactionMetadata, error) {
	ret := _m.Called(ctx, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 transactionmodels.TransactionMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (transactionmodels.TransactionMetadata, error)); ok {
		return rf(ctx, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) transactionmodels.TransactionMetadata); ok {
		r0 = rf(ctx, transactionID)
	} else {
		r0 = ret.Get(0).(transactionmodels.TransactionMetadata)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionStorage creates a new instance of TransactionStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionStorage {
	mock := &TransactionStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
